#Version 2.2, mise à jour du 16 juillet 2014
#  Ajout de nouvelles fonctions (groupe des fonctions PCC achevé, encore à débuguer)
#  Correction d'un TRÈS GROS bug sur PCC.doElimination
#  Harmonisation des noms de variables
#  Réduction du nombre de bibliothèques chargées au démarrage
#Version 2.1, mise à jour du 1er juillet 2014
#    Correction d'un bug sur la fonction PCC.contam (X non défini).
#    Intégration du tracé du graphique et Insertion des bibliothèques nécessaires à cette fin (à recalibrer encore).
#    N.B.: ultérieurement, il pourrait être bon, soit de proposer plot comme option [plutôt], soit de redistinguer plot et la fonction conflicts.
#     Agenda - TODO(global):
#	 - remplacer print()/writelines() par message() ou warning() lorsque cela est approprié.
#        - pour le 17 JUILLET : ajouter l'option recoverNA dans PCC.Stemma et PCC.reconstructModel, et faire du débuguage à partir des jeux de données (notamment Parzival).
#        - ajouter une fonction PCC (tout court) qui fasse l'ensemble du trajet).
#        - Nettoyer la base fournival (vérif. omissions/lacunes). NB: Ambroise pas ajoutée au package, car confidentiel, mais à garder pour des tests.
#        - ajouter la liste des packages qui doivent être masqués lors de l'import du nôtre (pas très urgent, mais doit impérativement être fait avant une release, pour éviter les bugs)
#        - avant ou durant la mise en package et son chargement sur GitHub, relire l'ensemble du code, le commenter, l'optimiser si possible, le retester et le nettoyer
#        - développement (devrait être rapide) de la fonction de sélection (et étiquetage) des lieux variants sur le graphe des conflits (avec couleurs) ; ... DONE
#        - développement de la fonction de construction de l'arbre ; ... DONE
#        - intégration d'autres outils de construction de l'arbre  #        - développement des méthodes de caractérisation de la contamination (fonctions maison, mais aussi cardiogrammes)  #       - détail : ajouter une progress bar pour la fonction contam ?  #       - intégration de la fonction de construction de l'arbre en tradition contaminée.
#    - IMPORTANT : pour la fonction de comptage, différencier quand le nombre de désaccords (accords,...) est NA ou bien = 0 (simple : suffit d'ajouter des tests is.na() et d'initialiser à 0, si est na, la première fois que l'on est à même de constater l'absence de désaccord (ou d'accord,...).) ... DONE
#    - à faire, comme partie de la mise en module : définir un ensemble de classes ; différencier les comportements selon les classes ; cf. Leisch, Creating packages, p. 5 et suiv.
#En plus de Leisch, Creating packages, voir aussi, R TEAM, “Writing R Extensions”, 2008

##NB: Functions for Debugging
# Debug Mode
#   debug(fun, text = "", condition = NULL)
#   debugonce(fun, text = "", condition = NULL)
#   undebug(fun)
#   isdebugged(fun)
# Show error context (very useful)
#   options(show.error.locations=TRUE)

##NB: Pour le nettoyage du code R, il existe des fonctions internes, mais elles enlèvent les commentaires ## pour ne pas enlever les commentaires, formatR (cf. http://www.r-bloggers.com/tools-to-tidy-up-r-code/)

##NNB: pour augmenter l'efficacité du code R et faire du profiling, benchmark :
# https://www.stat.auckland.ac.nz/~stat782/downloads/10-Efficiency-handouts.pdf
# Advanced R, Performance : http://adv-r.had.co.nz/Performance.html
# Commandes Rprof() et summaryRprof()
# package microbenchmark


#library("statnet") #Apparently, we use statnet only for sna (and its gplot function), as well as network (see http://cran.r-project.org/web/packages/statnet/statnet.pdf for full details), so it will be lighter with only,
library("network")
library("sna")
library("cluster")
